webdriver = require("selenium-webdriver")
protractor = require("protractor")
util = require("util")
require("protractor/jasminewd")

describe "test application", ->
  ptor = undefined
  describe "no ptor at all", ->
    it "should still do normal tests", ->
      expect(true).toBe true


  describe "finding elements in forms", ->
    ptor = protractor.getInstance()
    beforeEach ->
      ptor.get "app/index.html#/form"

    it "should still do normal tests", ->
      expect(true).toBe true

    it "should find an element by binding", ->
      ptor.findElement(protractor.By.binding("{{greeting}}")).getText().then (text) ->
        expect(text).toEqual "Hiya"


    it "should find a binding by partial match", ->
      ptor.findElement(protractor.By.binding("greet")).getText().then (text) ->
        expect(text).toEqual "Hiya"


    it "should find an element by binding with attribute", ->
      ptor.findElement(protractor.By.binding("username")).getText().then (text) ->
        expect(text).toEqual "Anon"


    it "should find an element by text input model", ->
      username = ptor.findElement(protractor.By.input("username"))
      username.clear()
      username.sendKeys "Jane Doe"
      ptor.findElement(protractor.By.binding("username")).getText().then (text) ->
        expect(text).toEqual "Jane Doe"


    it "should find an element by checkbox input model", ->
      ptor.findElement(protractor.By.id("shower")).isDisplayed().then (displayed) ->
        expect(displayed).toBe true

      colors = ptor.findElement(protractor.By.input("show")).click()
      ptor.findElement(protractor.By.id("shower")).isDisplayed().then (displayed) ->
        expect(displayed).toBe false


    it "should find inputs with alternate attribute forms", ->
      letterList = ptor.findElement(protractor.By.id("letterlist"))
      letterList.getText().then (text) ->
        expect(text).toBe ""

      ptor.findElement(protractor.By.input("check.w")).click()
      letterList.getText().then (text) ->
        expect(text).toBe "w"

      ptor.findElement(protractor.By.input("check.x")).click()
      letterList.getText().then (text) ->
        expect(text).toBe "wx"

      ptor.findElement(protractor.By.input("check.y")).click()
      letterList.getText().then (text) ->
        expect(text).toBe "wxy"

      ptor.findElement(protractor.By.input("check.z")).click()
      letterList.getText().then (text) ->
        expect(text).toBe "wxyz"


    it "should find a repeater by partial match", ->
      ptor.findElement(protractor.By.repeater("baz in days | filter:'T'").row(1).column("{{baz}}")).getText().then (text) ->
        expect(text).toEqual "Tue"

      ptor.findElement(protractor.By.repeater("baz in days").row(1).column("b")).getText().then (text) ->
        expect(text).toEqual "Tue"

      ptor.findElement(protractor.By.repeater("baz in days").row(1)).getText().then (text) ->
        expect(text).toEqual "Tue"


    it "should find a repeater using data-ng-repeat", ->
      ptor.findElement(protractor.By.repeater("day in days").row(3)).getText().then (text) ->
        expect(text).toEqual "Wed"

      ptor.findElement(protractor.By.repeater("day in days").row(3).column("day")).getText().then (text) ->
        expect(text).toEqual "Wed"


    it "should find a repeater using ng:repeat", ->
      ptor.findElement(protractor.By.repeater("bar in days").row(3)).getText().then (text) ->
        expect(text).toEqual "Wed"

      ptor.findElement(protractor.By.repeater("bar in days").row(3).column("bar")).getText().then (text) ->
        expect(text).toEqual "Wed"


    it "should find a repeater using ng_repeat", ->
      ptor.findElement(protractor.By.repeater("foo in days").row(3)).getText().then (text) ->
        expect(text).toEqual "Wed"

      ptor.findElement(protractor.By.repeater("foo in days").row(3).column("foo")).getText().then (text) ->
        expect(text).toEqual "Wed"


    it "should find a repeater using x-ng-repeat", ->
      ptor.findElement(protractor.By.repeater("qux in days").row(3)).getText().then (text) ->
        expect(text).toEqual "Wed"

      ptor.findElement(protractor.By.repeater("qux in days").row(3).column("qux")).getText().then (text) ->
        expect(text).toEqual "Wed"



  describe "finding elements - further examples", ->
    beforeEach ->
      ptor.get "app/index.html#/bindings"

    it "should find elements using a select", ->
      ptor.findElement(protractor.By.selectedOption("planet")).getText().then (text) ->
        expect(text).toEqual "Mercury"

      
      # There must be a better way to do this.
      ptor.findElement(protractor.By.select("planet")).findElement(protractor.By.css("option[value=\"4\"]")).click()
      ptor.findElement(protractor.By.selectedOption("planet")).getText().then (text) ->
        expect(text).toEqual "Jupiter"


    it "should find elements using a repeater", ->
      
      # Returns the element for the entire row.
      ptor.findElement(protractor.By.repeater("ball in planets").row(3)).getText().then (text) ->
        expect(text).toEqual "Earth:3"

      
      # Returns the element in row 2 and the column with binding {{ball.name}}
      ptor.findElement(protractor.By.repeater("ball in planets").row(2).column("{{ball.name}}")).getText().then (text) ->
        expect(text).toEqual "Venus"

      
      # Returns the entire column.
      ptor.findElements(protractor.By.repeater("ball in planets").column("{{ball.name}}")).then (arr) ->
        arr[1].getText().then (text) ->
          expect(text).toEqual "Venus"

        arr[2].getText().then (text) ->
          expect(text).toEqual "Earth"



    it "should find multiple elements by binding", ->
      
      # There must be a better way to do this.
      ptor.findElement(protractor.By.select("planet")).findElement(protractor.By.css("option[value=\"4\"]")).click()
      ptor.findElements(protractor.By.binding("{{moon}}")).then (arr) ->
        arr[0].getText().then (text) ->
          expect(text).toEqual "Europa"

        arr[2].getText().then (text) ->
          expect(text).toEqual "Ganymede"




  describe "mock modules", ->
    
    # A module to override the 'version' service. This function will be
    # executd in the context of the application under test, so it may
    # not refer to any local variables.
    mockModuleA = ->
      newModule = angular.module("moduleA", [])
      newModule.value "version", "2"

    
    # A second module overriding the 'version' service. 
    # This module shows the use of a string for the load
    # function.
    # TODO(julie): Consider this syntax. Should we allow loading the
    # modules from files? Provide helpers?
    mockModuleB = "angular.module('moduleB', []).value('version', '3');"
    afterEach ->
      ptor.clearMockModules()

    it "should override services via mock modules", ->
      ptor.addMockModule "moduleA", mockModuleA
      ptor.get "app/index.html"
      ptor.findElement(protractor.By.css("[app-version]")).getText().then (text) ->
        expect(text).toEqual "2"


    it "should have the version of the last loaded module", ->
      ptor.addMockModule "moduleA", mockModuleA
      ptor.addMockModule "moduleB", mockModuleB
      ptor.get "app/index.html"
      ptor.findElement(protractor.By.css("[app-version]")).getText().then (text) ->
        expect(text).toEqual "3"



  describe "synchronizing with Angular", ->
    describe "http calls", ->
      beforeEach ->
        ptor.get "app/index.html"

      it "should wait for slow RPCs", ->
        sample1Button = ptor.findElement(protractor.By.id("sample1"))
        sample2Button = ptor.findElement(protractor.By.id("sample2"))
        sample1Button.click()
        fetchButton = ptor.findElement(protractor.By.id("fetch"))
        fetchButton.click()
        
        # The quick RPC works fine.
        status = ptor.findElement(protractor.By.binding("{{status}}"))
        status.getText().then (text) ->
          expect(text).toEqual "200"

        ptor.findElement(protractor.By.binding("{{data}}")).getText().then (text) ->
          expect(text).toEqual "done"

        
        # Slow RPC.
        sample2Button.click()
        fetchButton.click()
        
        # Would normally need ptor.sleep(2) or something.
        ptor.findElement(protractor.By.id("statuscode")).getText().then (text) ->
          expect(text).toEqual "200"

        ptor.findElement(protractor.By.id("data")).getText().then (text) ->
          expect(text).toEqual "finally done"



    describe "slow rendering", ->
      beforeEach ->
        ptor.get "app/index.html#/repeater"

      it "should synchronize with a slow action", ->
        addOneButton = ptor.findElement(protractor.By.id("addone"))
        addOneButton.click()
        ptor.findElement(protractor.By.repeater("foo in foos | orderBy:'a':true").row(1).column("{{foo.b}}")).getText().then (text) ->
          expect(text).toEqual "14930352"

        addOneButton.click()
        ptor.findElement(protractor.By.repeater("foo in foos | orderBy:'a':true").row(1).column("{{foo.b}}")).getText().then (text) ->
          expect(text).toEqual "24157817"





describe "protractor library", ->
  ptor = protractor.getInstance()
  it "should wrap webdriver", ->
    ptor.get "app/index.html"
    ptor.getTitle().then (title) ->
      expect(title).toEqual "My AngularJS App"


  it "should allow a mix of using protractor and using the driver directly", ->
    ptor.get "app/index.html"
    ptor.getCurrentUrl().then (url) ->
      expect(url).toEqual "http://localhost:8000/app/index.html#/http"

    ptor.driver.findElement(protractor.By.linkText("repeater")).click()
    ptor.driver.getCurrentUrl().then (url) ->
      expect(url).toEqual "http://localhost:8000/app/index.html#/repeater"

    ptor.navigate().back()
    ptor.driver.getCurrentUrl().then (url) ->
      expect(url).toEqual "http://localhost:8000/app/index.html#/http"



describe "synchronizing with slow pages", ->
  ptor = protractor.getInstance()
  beforeEach ->
    ptor.get "app/index.html#/async"

  it "waits for http calls", ->
    status = ptor.findElement(protractor.By.binding("slowHttpStatus"))
    button = ptor.findElement(protractor.By.css("[ng-click=\"slowHttp()\"]"))
    expect(status.getText()).toEqual "not started"
    button.click()
    ptor.waitForAngular()
    expect(status.getText()).toEqual "done"

  it "waits for long javascript execution", ->
    status = ptor.findElement(protractor.By.binding("slowFunctionStatus"))
    button = ptor.findElement(protractor.By.css("[ng-click=\"slowFunction()\"]"))
    expect(status.getText()).toEqual "not started"
    button.click()
    ptor.waitForAngular()
    expect(status.getText()).toEqual "done"

  it "DOES NOT wait for timeout", ->
    status = ptor.findElement(protractor.By.binding("slowTimeoutStatus"))
    button = ptor.findElement(protractor.By.css("[ng-click=\"slowTimeout()\"]"))
    expect(status.getText()).toEqual "not started"
    button.click()
    ptor.waitForAngular()
    expect(status.getText()).toEqual "pending..."

  it "waits for $timeout", ->
    status = ptor.findElement(protractor.By.binding("slowAngularTimeoutStatus"))
    button = ptor.findElement(protractor.By.css("[ng-click=\"slowAngularTimeout()\"]"))
    expect(status.getText()).toEqual "not started"
    button.click()
    ptor.waitForAngular()
    expect(status.getText()).toEqual "done"

  it "waits for $timeout then a promise", ->
    status = ptor.findElement(protractor.By.binding("slowAngularTimeoutPromiseStatus"))
    button = ptor.findElement(protractor.By.css("[ng-click=\"slowAngularTimeoutPromise()\"]"))
    expect(status.getText()).toEqual "not started"
    button.click()
    ptor.waitForAngular()
    expect(status.getText()).toEqual "done"

  it "waits for long http call then a promise", ->
    status = ptor.findElement(protractor.By.binding("slowHttpPromiseStatus"))
    button = ptor.findElement(protractor.By.css("[ng-click=\"slowHttpPromise()\"]"))
    expect(status.getText()).toEqual "not started"
    button.click()
    ptor.waitForAngular()
    expect(status.getText()).toEqual "done"

